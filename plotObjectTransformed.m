
function plotObjectTransformed(Object, TransformationStack)
    function Rad = toRad(Deg)
        Rad = Deg * pi / 180.0;
    end

    function Matrix = getTransform(Transform)
        Matrix = [...
                      1, 0, 0, 0 ...
                    ; 0, 1, 0, 0 ...
                    ; 0, 0, 1, 0 ...
                    ; 0, 0, 0, 1 ...
                ];
        switch(Transform.Type)
            case 'translation'
                Matrix = [...
                      1, 0, 0, Transform.X ...
                    ; 0, 1, 0, Transform.Y ...
                    ; 0, 0, 1, Transform.Z ...
                    ; 0, 0, 0, 1 ...
                ];
            case 'rotation'
                CosX = cos(toRad(Transform.Rx));
                SinX = sin(toRad(Transform.Rx));
                CosY = cos(toRad(Transform.Ry));
                SinY = sin(toRad(Transform.Ry));
                CosZ = cos(toRad(Transform.Rz));
                SinZ = sin(toRad(Transform.Rz));
                Rx = [...
                    1, 0, 0, 0 ...
                  ; 0, CosX, -SinX, 0 ...
                  ; 0, SinX, CosX, 0 ...
                  ; 0, 0, 0, 1 ...

                ];
                Ry = [...
                    CosY, 0, SinY, 0 ...
                  ; 0, 1, 0, 0 ...
                  ; -SinY, 0, CosY, 0 ...
                  ; 0, 0, 0, 1 ...
                ];
                Rz = [...
                    CosZ, -SinZ, 0, 0 ...
                  ; SinZ, CosZ, 0, 0 ...
                  ; 0, 0, 1, 0 ...
                  ; 0, 0, 0, 1 ...
                ];
                Matrix = (Rx * Ry * Rz);
			case 'scaling'
                Matrix = [...
                      Transform.X, 0, 0, 0 ...
                    ; 0, Transform.Y, 0, 0 ...
                    ; 0, 0, Transform.Z, 0 ...
                    ; 0, 0, 0, 1 ...
                ];
            case 'shearing'
                shx = Transform.X;
                shy = Transform.Y;
                shz = Transform.Z;
                
                if shx ~= 0 && shy ~= 0
                    Matrix=[...
                        1,0,shx,0 ...
                        ; 0,1,shy,0 ...
                        ; 0,0,1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end

                if shz ~= 0 && shy ~= 0
                    Matrix=[...
                        1,0,0,0 ...
                        ; shy,1,0,0 ...
                        ; shz,0,1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end

                if shx ~= 0 && shz ~= 0
                    Matrix=[...
                        1,shx,0,0 ...
                        ; 0,1,0,0 ...
                        ; 0,shz,1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end
            case 'mirroring'
                index = Transform.MirrorIndex;
                if strcmp(index, 'yz')
                    Matrix = [...
                         -1,0,0,0 ...
                        ; 0,1,0,0 ...
                        ; 0,0,1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end
                if strcmp(index, 'xz')
                    Matrix = [...
                          1,0,0,0 ...
                        ; 0,-1,0,0 ...
                        ; 0,0,1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end
                if strcmp(index, 'xy')
                    Matrix = [...
                          1,0,0,0 ...
                        ; 0,1,0,0 ...
                        ; 0,0,-1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end
                if strcmp(index, 'x')
                    Matrix = [...
                          1,0,0,0 ...
                        ; 0,-1,0,0 ...
                        ; 0,0,-1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end
                if strcmp(index, 'y')
                    Matrix = [...
                          -1,0,0,0 ...
                        ; 0,1,0,0 ...
                        ; 0,0,-1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end
                if strcmp(index, 'z')
                    Matrix = [...
                          -1,0,0,0 ...
                        ; 0,-1,0,0 ...
                        ; 0,0,1,0 ...
                        ; 0,0,0,1 ...
                        ];
                end
            otherwise
                Matrix = [...
                      1, 0, 0, 0 ...
                    ; 0, 1, 0, 0 ...
                    ; 0, 0, 1, 0 ...
                    ; 0, 0, 0, 1 ...
                ];
        end
    end
    switch(Object.Type)
        case 'Line'
            NumPairs = floor(length(Object.Indices) / 2);
            for I = 1:NumPairs
                Idx = 1 + (I - 1) * 2;
                Indices = Object.Indices(1, Idx:Idx + 1);
                Vectors = [ Object.Vertices(:, Indices); ones(1, length(Indices)) ];
                for J = 1:length(TransformationStack)
                    Vectors = getTransform(TransformationStack{J}) * Vectors;
                end
                Vectors = Vectors(1:3, :);
                plot3(Vectors(1, :), Vectors(3, :), Vectors(2, :), 'blue');
            end
        case 'TriangleStrip'
            NumTriangles = length(Object.Indices) - 2;
            for I = 1:NumTriangles
                Indices = Object.Indices(1, I:I + 2);
                Vectors = [ Object.Vertices(:, Indices); ones(1, length(Indices)) ];
                for J = 1:length(TransformationStack)
                    Vectors = getTransform(TransformationStack{J}) * Vectors;
                end
                Vectors = Vectors(1:3, :);
                Surface = fill3(Vectors(1, :), Vectors(3, :), Vectors(2, :), 'red');
                set(Surface, 'EdgeColor', 'none');
            end
    end
end
