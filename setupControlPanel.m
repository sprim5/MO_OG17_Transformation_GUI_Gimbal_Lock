function Panel = setupControlPanel(Parent, Application)
    % ==================================================
    % Setups the control panel
    % The panel includes control buttons to modify existing transformations
    % such as translations, rotations and more
    % ==================================================
    CurrentTransformation = struct();
    IgnoreNext = 0;

    TransformationUpdatedListeners = {};
    Panel.addTransformationUpdatedListener = @(Listener) addListener(Listener, 'updated');

    Application.addTransformationUpdatedListener(@onUpdate);


    ControlPanel = uix.BoxPanel(...
        'Parent', Parent ...
      , 'Title', 'Controls' ...
      , 'TitleColor', [ 0.5, 0.6, 0.7 ] ...
      , 'FontSize', 12 ...
      , 'FontWeight', 'bold' ...
      , 'Padding', 5 ...
    );

    TransformationTabs = uix.TabPanel(...
        'Parent', ControlPanel ...
      , 'FontSize', 12 ...
      , 'Padding', 5 ...
      , 'TabWidth', 100 ...
      , 'SelectionChangedFcn', @(Source, Event) notify('type') ...
    );

    % ==================================================
    % Translation
    % ==================================================
    TranslationTab = uix.VBox(...
        'Parent', TransformationTabs ...
      , 'Spacing', 5 ...
    );

    TranslationDelta = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '1.0');
    TranslationX = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '0.0', 'Callback', @(Source, Event) setTransformation('x'));
    TranslationY = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '0.0', 'Callback', @(Source, Event) setTransformation('y'));
    TranslationZ = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '0.0', 'Callback', @(Source, Event) setTransformation('z'));

    row(TranslationTab, TranslationDelta);
    row(TranslationTab ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '-X', 'Callback', @(Source, Event) change('-x')) ...
      , TranslationX ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '+X', 'Callback', @(Source, Event) change('+x'))  ...
    );
    row(TranslationTab ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '-Y', 'Callback', @(Source, Event) change('-y')) ...
      , TranslationY ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '+Y', 'Callback', @(Source, Event) change('+y')) ...
    );
    row(TranslationTab ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '-Z', 'Callback', @(Source, Event) change('-z')) ...
      , TranslationZ ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '+Z', 'Callback', @(Source, Event) change('+z')) ...
    );

    % ==================================================
    % Scaling
    % ==================================================
    ScalingTab = uix.VBox(...
        'Parent', TransformationTabs ...
      , 'Spacing', 5 ...
    );

    ScalingDelta = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '1.0');
    ScalingX = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '0.0', 'Callback', @(Source, Event) setTransformation('x'));
    ScalingY = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '0.0', 'Callback', @(Source, Event) setTransformation('y'));
    ScalingZ = uicontrol('Style', 'edit', 'FontSize', 10, 'String', '0.0', 'Callback', @(Source, Event) setTransformation('z'));

    row(ScalingTab, ScalingDelta);
    row(ScalingTab ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '-X', 'Callback', @(Source, Event) change('-x')) ...
      , ScalingX ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '+X', 'Callback', @(Source, Event) change('+x')) ...
    );
    row(ScalingTab ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '-Y', 'Callback', @(Source, Event) change('-y')) ...
      , ScalingY ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '+Y', 'Callback', @(Source, Event) change('+y')) ...
    );
    row(ScalingTab ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '-Z', 'Callback', @(Source, Event) change('-z')) ...
      , ScalingZ ...
      , uicontrol('Style', 'pushbutton', 'FontSize', 20, 'String', '+Z', 'Callback', @(Source, Event) change('+z')) ...
    );

    % ==================================================
    % Rotation
    % ==================================================
    RotationTab = uix.VBox(...
        'Parent', TransformationTabs ...
      , 'Spacing', 5 ...
    );

    uix.HBox('Parent', RotationTab);

    RotationXRow = uix.HBox(...
        'Parent', RotationTab ...
      , 'Spacing', 5 ...
    );
    uicontrol(...
        'Parent', RotationXRow ...
      , 'Style', 'text' ...
      , 'String', 'Rotation X' ...
      , 'FontSize', 20 ...
    );
    RotationXSlider = uicontrol(...
        'Parent', RotationXRow ...
      , 'Style', 'slider' ...
      , 'Min', -180 ...
      , 'Max', 180 ...
      , 'SliderStep', [ 1 / 360, 1 / 36 ] ...
      , 'Value', 0 ...
      , 'Callback', @(Source, Event) change('x') ...
    );
    RotationX = uicontrol(...
        'Parent', RotationXRow ...
      , 'Style', 'edit' ...
      , 'FontSize', 10 ...
      , 'String', '0.0' ...
      , 'Callback', @(Source, Event) setTransformation('x') ...
    );
    set(RotationXRow, 'Widths', [ 150, -1, 50 ]);

    RotationYRow = uix.HBox(...
        'Parent', RotationTab ...
      , 'Spacing', 5 ...
    );
    uicontrol(...
        'Parent', RotationYRow ...
      , 'Style', 'text' ...
      , 'String', 'Rotation Y' ...
      , 'FontSize', 20 ...
    );
    RotationYSlider = uicontrol(...
        'Parent', RotationYRow ...
      , 'Style', 'slider' ...
      , 'Min', -180 ...
      , 'Max', 180 ...
      , 'SliderStep', [ 1 / 360, 1 / 36 ] ...
      , 'Value', 0 ...
      , 'Callback', @(Source, Event) change('y') ...
    );
    RotationY = uicontrol(...
        'Parent', RotationYRow ...
      , 'Style', 'edit' ...
      , 'FontSize', 10 ...
      , 'String', '0.0' ...
      , 'Callback', @(Source, Event) setTransformation('y') ...
    );
    set(RotationYRow, 'Widths', [ 150, -1, 50 ]);

    RotationZRow = uix.HBox(...
        'Parent', RotationTab ...
      , 'Spacing', 5 ...
    );
    uicontrol(...
        'Parent', RotationZRow ...
      , 'Style', 'text' ...
      , 'String', 'Rotation Z' ...
      , 'FontSize', 20 ...
    );
    RotationZSlider = uicontrol(...
        'Parent', RotationZRow ...
      , 'Style', 'slider' ...
      , 'Min', -180 ...
      , 'Max', 180 ...
      , 'SliderStep', [ 1 / 360, 1 / 36 ] ...
      , 'Value', 0 ...
      , 'Callback', @(Source, Event) change('z') ...
    );
    RotationZ = uicontrol(...
        'Parent', RotationZRow ...
      , 'Style', 'edit' ...
      , 'FontSize', 10 ...
      , 'String', '0.0' ...
      , 'Callback', @(Source, Event) setTransformation('z') ...
    );
    set(RotationZRow, 'Widths', [ 150, -1, 50 ]);


    set(TransformationTabs, 'TabTitles', { 'Translation', 'Scaling', 'Rotation' });
    set(TransformationTabs, 'TabEnables', { 'off', 'off', 'off' });


    function Row = row(Parent, varargin)
        Row = uix.HButtonBox(...
            'Parent', Parent ...
          , 'Spacing', 5 ...
          , 'ButtonSize', [ 50, 50 ] ...
        );

        for Idx = 1:length(varargin)
            set(varargin{Idx}, 'Parent', Row);
        end
    end

    function onUpdate(Args)
        Transformations = Args{1};
        NumTransformations = length(Transformations);
        if NumTransformations > 0
            TransformationTabs.TabEnables = { 'on', 'on', 'on' };
            CurrentTransformation = Transformations{Args{2}};
            updateTransformation(CurrentTransformation);
        else
            TransformationTabs.TabEnables = { 'off', 'off', 'off' };
        end
    end

    function updateTransformation(Transformation)
        switch(Transformation.Type)
            case 'translation'
                IgnoreNext = (TransformationTabs.Selection ~= 1);
                TransformationTabs.Selection = 1;
                TranslationX.String = Transformation.X;
                TranslationY.String = Transformation.Y;
                TranslationZ.String = Transformation.Z;
            case 'scaling'
                IgnoreNext = (TransformationTabs.Selection ~= 2);
                TransformationTabs.Selection = 2;
                ScalingX.String = Transformation.X;
                ScalingY.String = Transformation.Y;
                ScalingZ.String = Transformation.Z;
            case 'rotation'
                IgnoreNext = (TransformationTabs.Selection ~= 3);
                TransformationTabs.Selection = 3;
                RotationXSlider.Value = Transformation.Rx;
                RotationX.String = Transformation.Rx;
                RotationYSlider.Value = Transformation.Ry;
                RotationY.String = Transformation.Ry;
                RotationZSlider.Value = Transformation.Rz;
                RotationZ.String = Transformation.Rz;
            otherwise
                fprintf('[ERR] Unknown type: "%s"\n', Transformation.Type);
        end
    end

    function setTransformation(Type)
        switch CurrentTransformation.Type
            case 'translation'
                switch Type
                    case 'x'
                        CurrentTransformation.X = str2double(TranslationX.String);
                    case 'y'
                        CurrentTransformation.Y = str2double(TranslationY.String);
                    case 'z'
                        CurrentTransformation.Z = str2double(TranslationZ.String);
                end
            case 'scaling'
                switch Type
                    case 'x'
                        CurrentTransformation.X = str2double(ScalingX.String);
                    case 'y'
                        CurrentTransformation.Y = str2double(ScalingY.String);
                    case 'z'
                        CurrentTransformation.Z = str2double(ScalingZ.String);
                end
            case 'rotation'
                switch Type
                    case 'x'
                        CurrentTransformation.Rx = mod(str2double(RotationX.String) + 180, 360) - 180;
                    case 'y'
                        CurrentTransformation.Ry = mod(str2double(RotationY.String) + 180, 360) - 180;
                    case 'z'
                        CurrentTransformation.Rz = mod(str2double(RotationZ.String) + 180, 360) - 180;
                end
        end

        notify('updated');
    end

    function change(Type)
        switch CurrentTransformation.Type
            case 'translation'
                Delta = str2double(TranslationDelta.String);
                apply(Type, Delta);
            case 'scaling'
                Delta = str2double(ScalingDelta.String);
                apply(Type, Delta);
            case 'rotation'
                switch Type
                    case 'x'
                        CurrentTransformation.Rx = RotationXSlider.Value;
                    case 'y'
                        CurrentTransformation.Ry = RotationYSlider.Value;
                    case 'z'
                        CurrentTransformation.Rz = RotationZSlider.Value;
                end
        end

        function apply(Type, Delta)
            switch Type
                case '+x'
                    CurrentTransformation.X = CurrentTransformation.X + Delta;
                case '-x'
                    CurrentTransformation.X = CurrentTransformation.X - Delta;
                case '+y'
                    CurrentTransformation.Y = CurrentTransformation.Y + Delta;
                case '-y'
                    CurrentTransformation.Y = CurrentTransformation.Y - Delta;
                case '+z'
                    CurrentTransformation.Z = CurrentTransformation.Z + Delta;
                case '-z'
                    CurrentTransformation.Z = CurrentTransformation.Z - Delta;
            end
        end

        notify('updated');
    end

    function addListener(Listener, Type)
        switch(Type)
            case 'updated'
                TransformationUpdatedListeners = appendListener(Listener, TransformationUpdatedListeners);
        end
    end

    function Listeners = appendListener(Listener, Listeners)
        NumListeners = length(Listeners);
        Listeners{NumListeners + 1} = Listener;
    end

    function notify(Type, varargin)
        if IgnoreNext == 1
            IgnoreNext = 0;
            return
        end

        if nargin > 1
            ArgCount = nargin;
            Args = varargin;
        else
            ArgCount = 0;
        end

        Listeners = [];
        switch(Type)
            case 'updated'
                Listeners = TransformationUpdatedListeners;
                ArgCount = 1;
                Args = { CurrentTransformation };
            case 'type'
                Listeners = TransformationUpdatedListeners;

                switch TransformationTabs.Selection
                    case 1
                        CurrentTransformation = struct('Type', 'translation', 'X', 0.0, 'Y', 0.0, 'Z', 0.0);
                    case 2
                        CurrentTransformation = struct('Type', 'scaling', 'X', 1.0, 'Y', 1.0, 'Z', 1.0);
                    case 3
                        CurrentTransformation = struct('Type', 'rotation', 'Rx', 0.0, 'Ry', 0.0, 'Rz', 0.0);
                    otherwise
                        fprintf('[ERR] Invalid selection index: %d\n', TransformationTabs.Selection);
                end
                ArgCount = 1;
                Args = { CurrentTransformation };
        end

        NumListeners = length(Listeners);
        for I = 1:NumListeners
            Listener = Listeners{I};
            if ArgCount >= 1
                Listener(Args);
            else
                Listener();
            end
        end
    end

%{

%% Shearing

ShearingTab = uix.VBox(...
    'Parent', TransformationTabs ...
  , 'Spacing', 5 ...
);


Shearing1 = uix.HButtonBox(...
    'Parent', ShearingTab ...
  , 'Spacing', 5 ...
  , 'ButtonSize', [ 50, 50 ] ...
);
uix.Empty('Parent', Shearing1);
ShearingInputChange = uicontrol(...
    'Parent', Shearing1 ...
  , 'Style', 'edit' ...
  , 'FontSize', 10 ...
  , 'String', '1.0' ...
);
uix.Empty('Parent', Shearing1);


Shearing2 = uix.HButtonBox(...
    'Parent', ShearingTab ...
  , 'Spacing', 5 ...
  , 'ButtonSize', [ 50, 50 ] ...
);
ShearingButtonMinusX = uicontrol(...
    'Parent', Shearing2 ...
  , 'Style', 'pushbutton' ...
  , 'String', '-X' ...
  , 'FontSize', 20 ...
  , 'Callback', @(Source, Event) changeShearing('-', 'X') ...
);
ShearingInputX = uicontrol(...
    'Parent', Shearing2 ...
  , 'Style', 'edit' ...
  , 'FontSize', 10 ...
  , 'Callback', @(Source, Event) setShearing() ...
  , 'String', '1.0' ...
);
ShearingButtonPlusX = uicontrol(...
    'Parent', Shearing2 ...
  , 'Style', 'pushbutton' ...
  , 'String', '+X' ...
  , 'FontSize', 20 ...
  , 'Callback', @(Source, Event) changeShearing('+', 'X') ...
);


Shearing3 = uix.HButtonBox(...
    'Parent', ShearingTab ...
  , 'Spacing', 5 ...
  , 'ButtonSize', [ 50, 50 ] ...
);
ShearingButtonMinusY = uicontrol(...
    'Parent', Shearing3 ...
  , 'Style', 'pushbutton' ...
  , 'String', '-Y' ...
  , 'FontSize', 20 ...
  , 'Callback', @(Source, Event) changeShearing('-', 'Y') ...
);
ShearingInputY = uicontrol(...
    'Parent', Shearing3 ...
  , 'Style', 'edit' ...
  , 'FontSize', 10 ...
  , 'Callback', @(Source, Event) setShearing() ...
  , 'String', '1.0' ...
);
ShearingButtonPlusY = uicontrol(...
    'Parent', Shearing3 ...
  , 'Style', 'pushbutton' ...
  , 'String', '+Y' ...
  , 'FontSize', 20 ...
  , 'Callback', @(Source, Event) changeShearing('+', 'Y') ...
);



Shearing4 = uix.HButtonBox(...
    'Parent', ShearingTab ...
  , 'Spacing', 5 ...
  , 'ButtonSize', [ 50, 50 ] ...
);
ShearingButtonMinusZ = uicontrol(...
    'Parent', Shearing4 ...
  , 'Style', 'pushbutton' ...
  , 'String', '-Z' ...
  , 'FontSize', 20 ...
  , 'Callback', @(Source, Event) changeShearing('-', 'Z') ...
);
ShearingInputZ = uicontrol(...
    'Parent', Shearing4 ...
  , 'Style', 'edit' ...
  , 'FontSize', 10 ...
  , 'Callback', @(Source, Event) setShearing() ...
  , 'String', '0.0' ...
);
ShearingButtonPlusZ = uicontrol(...
    'Parent', Shearing4 ...
  , 'Style', 'pushbutton' ...
  , 'String', '+Z' ...
  , 'FontSize', 20 ...
  , 'Callback', @(Source, Event) changeShearing('+', 'Z') ...
);




%% Tab
TransformationTabs.TabTitles = { 'Translation', 'Scaling', 'Rotation', 'Shearing'};%, 'Mirror' };
%}
end