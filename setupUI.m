
function Window = setupUI(Settings)
    % get the screen dimensions
    ScreenSize = get(0, 'ScreenSize');
    Settings.ScreenSize = ScreenSize(3:4);

    Window.Figure = figure(...
          'Visible', 'off' ...
        , 'Position', [ (Settings.ScreenSize - Settings.Dimension) / 2, Settings.Dimension ] ...
        , 'SizeChangedFcn', @onResize ...
        ... % TODO : add key handling
        ... % , 'WindowKeyPressFcn', @keyPressed ...
    );

    % plot panel
    Window.PlotPanel = uipanel(Window.Figure,...
          'Title', 'Plot' ...
        , 'FontSize', 12 ...
    );
    Window.PlotPanel.Units = 'pixels';

    Window.Axes = axes(...
          'Parent', Window.PlotPanel ...
        , 'Units', 'pixels' ...
    );

    % list panel
    Window.ListPanel = uipanel(Window.Figure,...
          'Title', 'Transformations' ...
        , 'FontSize', 12 ...
    );
    Window.ListPanel.Units = 'pixels';

    Window.TransformationList = uicontrol(Window.ListPanel,...
        'Style', 'listbox' ...
        , 'String', {} ...
        , 'FontSize', 14 ...
        , 'Callback', @onSelect ...
    );
    Window.SelectedIndex = Window.TransformationList.Value;

    ArrowSymbols = struct(...
          'up', sprintf('\x2191') ...
        , 'down', sprintf('\x2193') ...
        , 'left', sprintf('\x2190') ...
        , 'right', sprintf('\x2192') ...
        , 'top', sprintf('\x219f') ...
        , 'bottom', sprintf('\x21a1') ...
        , 'first', sprintf('\x219e') ...
        , 'last', sprintf('\x21a0') ...
    );
    Window.TransformationButtonTop = uicontrol(Window.ListPanel,...
          'Style', 'pushbutton' ...
        , 'String', ArrowSymbols.top ...
        , 'FontSize', 30 ...
        , 'Callback', @(Source, Event) listSwap('first') ...
        , 'Enable', 'off' ...
    );
    Window.TransformationButtonUp = uicontrol(Window.ListPanel,...
          'Style', 'pushbutton' ...
        , 'String', ArrowSymbols.up ...
        , 'FontSize', 30 ...
        , 'Callback', @(Source, Event) listSwap('prev') ...
        , 'Enable', 'off' ...
    );
    Window.TransformationButtonDown = uicontrol(Window.ListPanel,...
          'Style', 'pushbutton' ...
        , 'String', ArrowSymbols.down ...
        , 'FontSize', 30 ...
        , 'Callback', @(Source, Event) listSwap('next') ...
        , 'Enable', 'off' ...
    );
    Window.TransformationButtonBottom = uicontrol(Window.ListPanel,...
          'Style', 'pushbutton' ...
        , 'String', ArrowSymbols.bottom ...
        , 'FontSize', 30 ...
        , 'Callback', @(Source, Event) listSwap('last') ...
        , 'Enable', 'off' ...
    );
    Window.TransformationButtonAdd = uicontrol(Window.ListPanel,...
          'Style', 'pushbutton' ...
        , 'String', 'Add transformation' ...
        , 'FontSize', 12 ...
        , 'Callback', @addTransformation ...
    );
    Window.TransformationButtonRemove = uicontrol(Window.ListPanel,...
          'Style', 'pushbutton' ...
        , 'String', 'Remove transformation' ...
        , 'FontSize', 12 ...
        , 'Callback', @removeTransformation ...
        , 'Enable', 'off' ...
    );

    % control panel
    Window.ControlPanel = uipanel(Window.Figure,...
          'Title', 'Controls' ...
        , 'FontSize', 12 ...
    );
    Window.ControlPanel.Units = 'pixels';

    Window.TransformationTabs = uitabgroup(Window.ControlPanel ...
      , 'Units', 'pixels' ...
    );
    Window.TranslationTab = uitab(Window.TransformationTabs ...
      , 'Title', 'Translation' ...
    );
    Window.TranslationLabelX = uicontrol(Window.TranslationTab ...
      , 'Style', 'text' ...
      , 'String', 'x-Translation' ...
      , 'FontSize', 20 ...
      , 'Enable', 'off' ...
    );
%{
    Window.TranslationMag = uicontrol(Window.TranslationTab ...
      , 'Style', 'edit' ...
    );
%}

    Window.ScalingTab = uitab(Window.TransformationTabs ...
      , 'Title', 'Scaling' ...
    );

    Window.TranslationPanel = uipanel(Window.ControlPanel ...
      , 'BorderWidth', 0 ...
      , 'BackgroundColor', [ 1, 0, 0 ] ...
    );
    Window.TranslationPanel.Units = 'pixels';
    Window.TranslationPanel.Visible = 'off';

    Window.SelectListeners = {};
    Window.Transformations = {};


    Window.setVisible = @setVisible;
    Window.addSelectListener = @(Listener) addListener(Listener);

    Window.addSelectListener(@onTransformationChange);

    function onTransformationChange(Index)
    end

    function addListener(Listener)
        NumListeners = length(Window.SelectListeners);
        Window.SelectListeners{NumListeners + 1} = Listener;
    end

    function listSwap(Index)
        switch(Index)
            case 'first'
                To = 1;
            case 'prev'
                To = Window.SelectedIndex - 1;
            case 'next'
                To = Window.SelectedIndex + 1;
            case 'last'
                To = length(Window.TransformationList.String);
        end

        swap(Window.SelectedIndex, To);

        function swap(From, To)
            ListLength = length(Window.TransformationList.String);
            if 1 <= From && From <= ListLength && 1 <= To && To <= ListLength && From ~= To
                Iter = sign(To - From);
                while abs(From - To) > 0
                    Next = From + Iter;
                    Tmp = Window.TransformationList.String(Next);
                    Window.TransformationList.String(Next) = Window.TransformationList.String(From);
                    Window.TransformationList.String(From) = Tmp;
                    From = Next;
                end
                Window.SelectedIndex = To;
                Window.TransformationList.Value = Window.SelectedIndex;
            end
        end
    end

    Value = 1;
    function addTransformation(Source, Event)
        LastIndex = length(Window.TransformationList.String);
        Window.Transformations{LastIndex + 1} = struct(...
              'Type', 'translation' ...
            , 'X', (floor(rand() * 8) - 4) / 2  ...
            , 'Y', (floor(rand() * 8) - 4) / 2 ...
        );

        Window.TransformationList.String(LastIndex + 1) = { getTransformationString(Window.Transformations{LastIndex + 1}) };
        Value = Value + 1;
        Window.SelectedIndex = LastIndex + 1;
        Window.TransformationList.Value = Window.SelectedIndex;

        Window.TransformationButtonRemove.Enable = 'on';
        Window.TransformationButtonUp.Enable = 'on';
        Window.TransformationButtonDown.Enable = 'on';
        Window.TransformationButtonTop.Enable = 'on';
        Window.TransformationButtonBottom.Enable = 'on';

        onPlot;
    end

    function onPlot()
        ObjectList = Objects;
        Scale = 10;
        cla(Window.Axes);
        grid on;
        axis([ -Scale, Scale, -Scale, Scale, -Scale, Scale ]);
        set(Window.Axes, 'xtick', -1000:1000);
        set(Window.Axes, 'ytick', -1000:1000);
        set(Window.Axes, 'ztick', -1000:1000);

        hold on;

        % plot main axes
        plot3([ -1000, 1000 ], [ 0, 0 ], [ 0, 0 ], 'r' ...
           , [ 0, 0 ], [ -1000, 1000 ], [ 0, 0 ], 'b' ...
           , [ 0, 0 ], [ 0, 0 ], [ -1000, 1000 ], 'g');

        for I = 1:length(ObjectList)
            plotObject(ObjectList(I));
        end

        for I = 1:length(ObjectList)
            plotObjectTransformed(ObjectList(I), Window.Transformations);
        end

        hold off;
    end

    function removeTransformation(Source, Event)
        Length = length(Window.TransformationList.String);
        if Length >= 1
            Window.Transformations(Window.SelectedIndex) = [];
            Window.TransformationList.String(Window.SelectedIndex) = [];
            Window.SelectedIndex = min(max(0, Window.SelectedIndex), Length - 1);
            Window.TransformationList.Value = Window.SelectedIndex;

            if Length == 1
                Source.Enable = 'off';
                Window.TransformationButtonUp.Enable = 'off';
                Window.TransformationButtonDown.Enable = 'off';
                Window.TransformationButtonTop.Enable = 'off';
                Window.TransformationButtonBottom.Enable = 'off';
            end
        end

        onPlot;
    end

    function Description = getTransformationString(Transformation)
        switch(Transformation.Type)
            case 'translation'
                Description = sprintf('Translation(%g, %g)', Transformation.X, Transformation.Y);
            otherwise
                Description = 'unknown transformation';
        end
    end

    function onSelect(Source, Event)
        Window.SelectedIndex = Source.Value;
        NumListeners = length(Window.SelectListeners);
        for I = 1:NumListeners
            Window.SelectListeners{I}(Window.SelectedIndex);
        end
    end

    function setVisible(Visible)
        if Visible
            onPlot;
            Window.Figure.Visible = 'on';
        else
            Window.Figure.Visible = 'off';
        end
    end

    function onResize(Source, Event)
        % enforce minimum position
        Temp = Source.Position(1:2);
        Source.Position(3) = max(Source.Position(3), Settings.MinDimension(1));
        Source.Position(4) = max(Source.Position(4), Settings.MinDimension(2));
        Source.Position(1) = Temp(1);
        Source.Position(2) = Temp(2);

        MaxVerticalPadding = max(Settings.Padding.Top, Settings.Padding.Bottom);
        MaxHorizontalPadding = max(Settings.Padding.Left, Settings.Padding.Right);
        Settings.Dimension = Source.Position(3:4);
        PlotPanelDimension = [...
            (Settings.Dimension(1) - (Settings.Padding.Left + Settings.Padding.Right + MaxHorizontalPadding)) / 2,...
            Settings.Dimension(2) - (Settings.Padding.Top + Settings.Padding.Bottom) ...
        ];
        Window.PlotPanel.Position = [ Settings.Padding.Left, Settings.Padding.Bottom, PlotPanelDimension ];
        ControlPanelsDimension = [...
            PlotPanelDimension(1),...
            (Settings.Dimension(2) - (Settings.Padding.Top + Settings.Padding.Bottom + MaxVerticalPadding)) / 2,...
        ];
        Window.ListPanel.Position = [...
            Settings.Padding.Left + MaxHorizontalPadding + PlotPanelDimension(1),...
            Settings.Padding.Bottom + MaxVerticalPadding + ControlPanelsDimension(2),...
            ControlPanelsDimension ];
        Window.ControlPanel.Position = [...
            Settings.Padding.Left + MaxHorizontalPadding + PlotPanelDimension(1),...
            Settings.Padding.Bottom,...
            ControlPanelsDimension ];
        TransformationListHeight = ControlPanelsDimension(2) - 30 - (Settings.Padding.Top + Settings.Padding.Bottom);
        Window.TransformationList.Position = [ Settings.Padding.Left, Settings.Padding.Bottom + MaxVerticalPadding + 30,...
            ControlPanelsDimension(1) - Settings.Padding.Left - (50 + MaxHorizontalPadding * 2),...
            TransformationListHeight - MaxVerticalPadding - 30 ...
        ];

        TransformationListCenter = TransformationListHeight / 2 + Settings.Padding.Bottom;
        Window.TransformationButtonTop.Position = [...
            Window.TransformationList.Position(1) + Window.TransformationList.Position(3) + MaxHorizontalPadding,...
            TransformationListCenter + ((3 / 2) * MaxVerticalPadding) + 60,...
            50,...
            60];
        Window.TransformationButtonUp.Position = [...
            Window.TransformationList.Position(1) + Window.TransformationList.Position(3) + MaxHorizontalPadding,...
            TransformationListCenter + (MaxVerticalPadding / 2),...
            50,...
            60];
        Window.TransformationButtonDown.Position = [...
            Window.TransformationList.Position(1) + Window.TransformationList.Position(3) + MaxHorizontalPadding,...
            TransformationListCenter - 60 - (MaxVerticalPadding / 2),...
            50,...
            60];
        Window.TransformationButtonBottom.Position = [...
            Window.TransformationList.Position(1) + Window.TransformationList.Position(3) + MaxHorizontalPadding,...
            TransformationListCenter - (2 * 60) - ((3 / 2) * MaxVerticalPadding),...
            50,...
            60];
        ButtonWidth = Window.TransformationList.Position(3) / 2 - (Settings.Padding.Left + Settings.Padding.Right);
        Window.TransformationButtonAdd.Position = [...
            Window.TransformationList.Position(1) + Settings.Padding.Left,...
            Settings.Padding.Bottom,...
            ButtonWidth,...
            30 ...
        ];
        Window.TransformationButtonRemove.Position = [...
            Window.TransformationList.Position(1) + Settings.Padding.Left + MaxHorizontalPadding + ButtonWidth,...
            Settings.Padding.Bottom,...
            ButtonWidth,...
            30 ...
        ];

        Window.ControlPanel.Position = [ ...
          , Settings.Padding.Left + MaxHorizontalPadding + PlotPanelDimension(1) ...
          , Settings.Padding.Bottom ...
          , ControlPanelsDimension ...
        ];
        Window.TransformationTabs.Position = [ ...
          , Settings.Padding.Left ...
          , Settings.Padding.Bottom ...
          , ControlPanelsDimension - [ Settings.Padding.Left + Settings.Padding.Right, Settings.Padding.Top + Settings.Padding.Bottom + 30 ] ...
        ];
        Window.TranslationLabelX.Position = [ ...
          , Settings.Padding.Left ...
          , Window.TransformationTabs.Position(3) - 400 ...
          , 180 ...
          , 30 ...
        ];

        AxesSize = min(Window.PlotPanel.Position(3:4));
        VerticalLeft = Window.PlotPanel.Position(4) - AxesSize;
        Window.Axes.Position = [ 40, 40 + VerticalLeft, [ AxesSize, AxesSize ] - 80 ];
    end
end
