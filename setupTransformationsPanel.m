function Panel = setupTransformationsPanel(Parent, Application)
    % ==================================================
    % Setups the transformation panel
    % The panel includes a list of transformations, buttons
    % to change the order and buttons to add or remove transformations
    % ==================================================
    TransformationAddedListeners = {};
    Panel.addTransformationAddedListener = @(Listener) addListener(Listener, 'added');
    TransformationRemovedListeners = {};
    Panel.addTransformationRemovedListener = @(Listener) addListener(Listener, 'removed');
    TransformationSelectedListeners = {};
    Panel.addTransformationSelectedListener = @(Listener) addListener(Listener, 'selected');
    TransformationSwitchedListeners = {};
    Panel.addTransformationSwitchedListener = @(Listener) addListener(Listener, 'switched');

    Panel.select = @select;

    ArrowSymbols = struct(...
        'Left', sprintf('\x2190') ...
      , 'Up', sprintf('\x2191') ...
      , 'Right', sprintf('\x2192') ...
      , 'Down', sprintf('\x2193') ...
      , 'Top', sprintf('\x219f') ...
      , 'Bottom', sprintf('\x21a1') ...
      , 'First', sprintf('\x219e') ...
      , 'Last', sprintf('\x21a0') ...
    );

    Application.addTransformationUpdatedListener(@onUpdate);

    RootPanel = uix.BoxPanel(...
        'Parent', Parent ...
      , 'Title', 'Transformations' ...
      , 'TitleColor', [ 0.5, 0.6, 0.7 ] ...
      , 'FontSize', 12 ...
      , 'FontWeight', 'bold' ...
      , 'Padding', 5 ...
    );

    GridLayout = uix.Grid(...
        'Parent', RootPanel ...
      , 'Spacing', 5 ...
    );

    % ==================================================
    % Transformation list, 'listbox' with the added transformations
    % ==================================================
    TransformationList = uicontrol(...
        'Parent', GridLayout ...
      , 'Style', 'listbox' ...
      , 'FontSize', 14 ...
      , 'Callback', @(Source, Event) notify('selected') ...
    );

    % ==================================================
    % Bottom Panel with 'Add' & 'Remove' buttons
    % ==================================================
    BottomPanel = uix.HBox(...
        'Parent', GridLayout ...
      , 'Spacing', 5 ...
    );

    uicontrol(...
        'Parent', BottomPanel ...
      , 'Style', 'pushbutton' ...
      , 'String', 'Add Transformation' ...
      , 'FontSize', 12 ...
      , 'Callback', @(Source, Event) notify('added') ...
    );

    % buttons to be deactivated when no transformations exist
    DeactivateButtons = [];
    DeactivateButtons = [ DeactivateButtons, uicontrol(...
        'Parent', BottomPanel ...
      , 'Style', 'pushbutton' ...
      , 'String', 'Remove Transformation' ...
      , 'FontSize', 12 ...
      , 'Callback', @(Source, Event) notify('removed') ...
      , 'Enable', 'off' ...
    )];

    % ==================================================
    % Side panel with buttons to switch the order of transformations
    % ==================================================
    SidePanel = uiextras.VBox(...
        'Parent', GridLayout ...
      , 'Spacing', 5 ...
    );

    DeactivateButtons = [ DeactivateButtons, uicontrol(...
        'Parent', SidePanel ...
      , 'Style', 'pushbutton' ...
      , 'String', ArrowSymbols.Top ...
      , 'FontSize', 30 ...
      , 'Callback', @(Source, Event) notify('switched', 'first') ...
      , 'Enable', 'off' ...
    )];
    DeactivateButtons = [ DeactivateButtons, uicontrol(...
        'Parent', SidePanel ...
      , 'Style', 'pushbutton' ...
      , 'String', ArrowSymbols.Up ...
      , 'FontSize', 30 ...
      , 'Callback', @(Source, Event) notify('switched', 'prev') ...
      , 'Enable', 'off' ...
    )];
    DeactivateButtons = [ DeactivateButtons, uicontrol(...
        'Parent', SidePanel ...
      , 'Style', 'pushbutton' ...
      , 'String', ArrowSymbols.Down ...
      , 'FontSize', 30 ...
      , 'Callback', @(Source, Event) notify('switched', 'next') ...
      , 'Enable', 'off' ...
    )];
    DeactivateButtons = [ DeactivateButtons, uicontrol(...
        'Parent', SidePanel ...
      , 'Style', 'pushbutton' ...
      , 'String', ArrowSymbols.Bottom ...
      , 'FontSize', 30 ...
      , 'Callback', @(Source, Event) notify('switched', 'last') ...
      , 'Enable', 'off' ...
    )];

    uix.Empty('Parent', GridLayout);

    set(GridLayout ...
      , 'Widths', [ -1, 50 ] ...
      , 'Heights', [ -1, 30 ] ...
    );

    function select(Index)
        TransformationList.Value = Index;
        notify('selected');
    end

    function onUpdate(Args)
        TransformationList.String = {};
        Transformations = Args{1};
        NumTransformations = length(Transformations);
        % keep selected index in a valid range (in case of deletion)
        TransformationList.Value = min(max(TransformationList.Value, 1), NumTransformations);
        for I = 1:NumTransformations
            TransformationList.String{I} = getTransformationString(Transformations{I});
        end

        % deactivate some buttons if there are no transformations
        if NumTransformations == 0
            Activate = 'off';
        else
            Activate = 'on';
        end

        NumButtons = length(DeactivateButtons);
        for I = 1:NumButtons
            set(DeactivateButtons(I), 'Enable', Activate);
        end
    end

    function addListener(Listener, Type)
        switch(Type)
            case 'added'
                TransformationAddedListeners = appendListener(Listener, TransformationAddedListeners);
            case 'removed'
                TransformationRemovedListeners = appendListener(Listener, TransformationRemovedListeners);
            case 'selected'
                TransformationSelectedListeners = appendListener(Listener, TransformationSelectedListeners);
            case 'switched'
                TransformationSwitchedListeners = appendListener(Listener, TransformationSwitchedListeners);
        end
    end

    function Listeners = appendListener(Listener, Listeners)
        NumListeners = length(Listeners);
        Listeners{NumListeners + 1} = Listener;
    end

    function notify(Type, varargin)
        if nargin > 1
            ArgCount = nargin;
            Args = varargin;
        else
            ArgCount = 0;
        end

        Listeners = [];
        switch(Type)
            case 'added'
                Listeners = TransformationAddedListeners;
            case 'removed'
                if length(TransformationList.String) <= 0
                    return;
                end

                Listeners = TransformationRemovedListeners;
            case 'selected'
                if length(TransformationList.String) <= 0
                    TransformationList.Value = 1;  % keep selected index valid
                    return;
                end

                Listeners = TransformationSelectedListeners;
                ArgCount = 1;
                Args = [ TransformationList.Value ];
            case 'switched'
                Listeners = TransformationSwitchedListeners;
        end

        NumListeners = length(Listeners);
        for I = 1:NumListeners
            Listener = Listeners{I};
            if ArgCount >= 1
                Listener(Args);
            else
                Listener();
            end
        end
    end

    function Description = getTransformationString(Transformation)
        switch(Transformation.Type)
            case 'translation'
                Description = sprintf('Translation(%g, %g, %g)', Transformation.X, Transformation.Y, Transformation.Z);
            case 'scaling'
                Description = sprintf('Scaling(%g, %g, %g)', Transformation.X, Transformation.Y, Transformation.Z);
            case 'rotation'
                Description = sprintf('Rotation(%g\x00B0, %g\x00B0, %g\x00B0)', Transformation.Rx, Transformation.Ry, Transformation.Rz);
            case 'mirroring'
                Description = sprintf('Mirroring(%s)', Transformation.MirrorIndex);
            case 'shearing'
                Description = sprintf('Shearing(%g, %g, %g)', Transformation.X, Transformation.Y, Transformation.Z);
            otherwise
                Description = 'unknown transformation';
        end
    end
end
